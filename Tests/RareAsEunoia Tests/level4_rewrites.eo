(declare-rule arith-abs-int-gt ((x1 Int) (y1 Int))
  :args (x1 y1)
  :conclusion (= (> (abs x1) (abs y1)) (eo::define ((_let_1 (- y1))) (eo::define ((_let_2 (- x1))) (eo::define ((_let_3 (>= y1 0))) (ite (>= x1 0) (ite _let_3 (> x1 y1) (> x1 _let_1)) (ite _let_3 (> _let_2 y1) (> _let_2 _let_1)))))))
)
(declare-rule arith-abs-real-gt ((x1 Real) (y1 Real))
  :args (x1 y1)
  :conclusion (= (> (abs x1) (abs y1)) (eo::define ((_let_1 (- y1))) (eo::define ((_let_2 (- x1))) (eo::define ((_let_3 (>= y1 0/1))) (ite (>= x1 0/1) (ite _let_3 (> x1 y1) (> x1 _let_1)) (ite _let_3 (> _let_2 y1) (> _let_2 _let_1)))))))
)
(declare-rule str-in-re-range-elim ((s1 String) (c1 String) (c2 String))
  :premises ((= (str.len c1) 1) (= (str.len c2) 1))
  :args (s1 c1 c2)
  :conclusion (= (str.in_re s1 (re.range c1 c2)) (eo::define ((_let_1 (str.to_code s1))) (and (<= (str.to_code c1) _let_1) (<= _let_1 (str.to_code c2)))))
)
(declare-rule str-in-re-contains ((t1 String) (s1 String))
  :args (t1 s1)
  :conclusion (= (eo::define ((_let_1 (re.* re.allchar))) (str.in_re t1 (re.++ _let_1 (str.to_re s1) _let_1))) (str.contains t1 s1))
)
(declare-rule str-in-re-from-int-nemp-dig-range ((n1 Int))
  :premises ((= (>= n1 0) true))
  :args (n1)
  :conclusion (= (eo::define ((_let_1 (re.range "0" "9"))) (str.in_re (str.from_int n1) (re.++ _let_1 (re.* _let_1)))) true)
)
(declare-rule uf-sbv-to-int-elim ((@n0 Int) (t1 (BitVec @n0)) (wm1 Int) (n1 Int))
  :premises ((= wm1 (- (@bvsize t1) 1)) (= n1 (int.pow2 (@bvsize t1))))
  :args (t1 wm1 n1)
  :conclusion (= (sbv_to_int t1) (eo::define ((_let_1 (ubv_to_int t1))) (ite (= (extract wm1 wm1 t1) (@bv 0 1)) _let_1 (- _let_1 n1))))
)
(declare-rule bv-ult-add-one ((@n0 Int) (@n1 Int) (@n2 Int) (@n3 Int) (x1 (BitVec @n0)) (ys1 (BitVec @n1) :list) (zs1 (BitVec @n2) :list) (c1 (BitVec @n3)) (w1 Int))
  :premises ((= c1 (@bv 1 w1)) (= w1 (@bvsize x1)))
  :args (x1 ys1 zs1 c1 w1)
  :conclusion (= (bvult x1 (bvadd ys1 c1 zs1)) (eo::define ((_let_1 (bvadd ys1 zs1))) (and (not (= _let_1 (bvnot (@bv 0 w1)))) (not (bvult _let_1 x1)))))
)
(declare-rule bv-and-concat-pullup ((@n0 Int) (@n1 Int) (@n2 Int) (@n3 Int) (@n4 Int) (xs1 (BitVec @n0) :list) (ws1 (BitVec @n1) :list) (y1 (BitVec @n2)) (z1 (BitVec @n3)) (ys1 (BitVec @n4) :list) (nxm1 Int) (ny1 Int) (nym1 Int))
  :premises ((= ny1 (@bvsize y1)) (= nxm1 (- (@bvsize (bvand xs1 ws1)) 1)) (= nym1 (- (@bvsize y1) 1)))
  :args (xs1 ws1 y1 z1 ys1 nxm1 ny1 nym1)
  :conclusion (= (bvand xs1 (concat ys1 z1 y1) ws1) (eo::define ((_let_1 (bvand xs1 ws1))) (concat (bvand (extract nxm1 ny1 _let_1) (concat ys1 z1)) (bvand (extract nym1 0 _let_1) y1))))
)
(declare-rule bv-or-concat-pullup ((@n0 Int) (@n1 Int) (@n2 Int) (@n3 Int) (@n4 Int) (xs1 (BitVec @n0) :list) (ws1 (BitVec @n1) :list) (y1 (BitVec @n2)) (z1 (BitVec @n3)) (ys1 (BitVec @n4) :list) (nxm1 Int) (ny1 Int) (nym1 Int))
  :premises ((= ny1 (@bvsize y1)) (= nxm1 (- (@bvsize (bvor xs1 ws1)) 1)) (= nym1 (- (@bvsize y1) 1)))
  :args (xs1 ws1 y1 z1 ys1 nxm1 ny1 nym1)
  :conclusion (= (bvor xs1 (concat ys1 z1 y1) ws1) (eo::define ((_let_1 (bvor xs1 ws1))) (concat (bvor (extract nxm1 ny1 _let_1) (concat ys1 z1)) (bvor (extract nym1 0 _let_1) y1))))
)
(declare-rule bv-xor-concat-pullup ((@n0 Int) (@n1 Int) (@n2 Int) (@n3 Int) (@n4 Int) (xs1 (BitVec @n0) :list) (ws1 (BitVec @n1) :list) (y1 (BitVec @n2)) (z1 (BitVec @n3)) (ys1 (BitVec @n4) :list) (nxm1 Int) (ny1 Int) (nym1 Int))
  :premises ((= ny1 (@bvsize y1)) (= nxm1 (- (@bvsize (bvxor xs1 ws1)) 1)) (= nym1 (- (@bvsize y1) 1)))
  :args (xs1 ws1 y1 z1 ys1 nxm1 ny1 nym1)
  :conclusion (= (bvxor xs1 (concat ys1 z1 y1) ws1) (eo::define ((_let_1 (bvxor xs1 ws1))) (concat (bvxor (extract nxm1 ny1 _let_1) (concat ys1 z1)) (bvxor (extract nym1 0 _let_1) y1))))
)
(declare-rule bv-and-concat-pullup2 ((@n0 Int) (@n1 Int) (@n2 Int) (@n3 Int) (@n4 Int) (xs1 (BitVec @n0) :list) (ws1 (BitVec @n1) :list) (y1 (BitVec @n2)) (z1 (BitVec @n3)) (ys1 (BitVec @n4) :list) (nxm1 Int) (ny1 Int) (nym1 Int))
  :premises ((= ny1 (@bvsize (concat y1 ys1))) (= nxm1 (- (@bvsize (bvand xs1 ws1)) 1)) (= nym1 (- (@bvsize (concat y1 ys1)) 1)))
  :args (xs1 ws1 y1 z1 ys1 nxm1 ny1 nym1)
  :conclusion (= (bvand xs1 (concat z1 y1 ys1) ws1) (eo::define ((_let_1 (bvand xs1 ws1))) (concat (bvand (extract nxm1 ny1 _let_1) z1) (bvand (extract nym1 0 _let_1) (concat y1 ys1)))))
)
(declare-rule bv-or-concat-pullup2 ((@n0 Int) (@n1 Int) (@n2 Int) (@n3 Int) (@n4 Int) (xs1 (BitVec @n0) :list) (ws1 (BitVec @n1) :list) (y1 (BitVec @n2)) (z1 (BitVec @n3)) (ys1 (BitVec @n4) :list) (nxm1 Int) (ny1 Int) (nym1 Int))
  :premises ((= ny1 (@bvsize (concat y1 ys1))) (= nxm1 (- (@bvsize (bvor xs1 ws1)) 1)) (= nym1 (- (@bvsize (concat y1 ys1)) 1)))
  :args (xs1 ws1 y1 z1 ys1 nxm1 ny1 nym1)
  :conclusion (= (bvor xs1 (concat z1 y1 ys1) ws1) (eo::define ((_let_1 (bvor xs1 ws1))) (concat (bvor (extract nxm1 ny1 _let_1) z1) (bvor (extract nym1 0 _let_1) (concat y1 ys1)))))
)
(declare-rule bv-xor-concat-pullup2 ((@n0 Int) (@n1 Int) (@n2 Int) (@n3 Int) (@n4 Int) (xs1 (BitVec @n0) :list) (ws1 (BitVec @n1) :list) (y1 (BitVec @n2)) (z1 (BitVec @n3)) (ys1 (BitVec @n4) :list) (nxm1 Int) (ny1 Int) (nym1 Int))
  :premises ((= ny1 (@bvsize (concat y1 ys1))) (= nxm1 (- (@bvsize (bvxor xs1 ws1)) 1)) (= nym1 (- (@bvsize (concat y1 ys1)) 1)))
  :args (xs1 ws1 y1 z1 ys1 nxm1 ny1 nym1)
  :conclusion (= (bvxor xs1 (concat z1 y1 ys1) ws1) (eo::define ((_let_1 (bvxor xs1 ws1))) (concat (bvxor (extract nxm1 ny1 _let_1) z1) (bvxor (extract nym1 0 _let_1) (concat y1 ys1)))))
)
(declare-rule bv-and-concat-pullup3 ((@n0 Int) (@n1 Int) (@n2 Int) (@n3 Int) (@n4 Int) (xs1 (BitVec @n0) :list) (ws1 (BitVec @n1) :list) (y1 (BitVec @n2)) (z1 (BitVec @n3)) (u1 (BitVec @n4)) (nxm1 Int) (nyu1 Int) (nyum1 Int) (nu1 Int) (num1 Int))
  :premises ((= nxm1 (- (@bvsize (bvand xs1 ws1)) 1)) (= nyu1 (+ (@bvsize y1) (@bvsize u1))) (= nyum1 (- (+ (@bvsize y1) (@bvsize u1)) 1)) (= nu1 (@bvsize u1)) (= num1 (- (@bvsize u1) 1)))
  :args (xs1 ws1 y1 z1 u1 nxm1 nyu1 nyum1 nu1 num1)
  :conclusion (= (bvand xs1 (concat z1 y1 u1) ws1) (eo::define ((_let_1 (bvand xs1 ws1))) (concat (bvand (extract nxm1 nyu1 _let_1) z1) (bvand (extract nyum1 nu1 _let_1) y1) (bvand (extract num1 0 _let_1) u1))))
)
(declare-rule bv-or-concat-pullup3 ((@n0 Int) (@n1 Int) (@n2 Int) (@n3 Int) (@n4 Int) (xs1 (BitVec @n0) :list) (ws1 (BitVec @n1) :list) (y1 (BitVec @n2)) (z1 (BitVec @n3)) (u1 (BitVec @n4)) (nxm1 Int) (nyu1 Int) (nyum1 Int) (nu1 Int) (num1 Int))
  :premises ((= nxm1 (- (@bvsize (bvor xs1 ws1)) 1)) (= nyu1 (+ (@bvsize y1) (@bvsize u1))) (= nyum1 (- (+ (@bvsize y1) (@bvsize u1)) 1)) (= nu1 (@bvsize u1)) (= num1 (- (@bvsize u1) 1)))
  :args (xs1 ws1 y1 z1 u1 nxm1 nyu1 nyum1 nu1 num1)
  :conclusion (= (bvor xs1 (concat z1 y1 u1) ws1) (eo::define ((_let_1 (bvor xs1 ws1))) (concat (bvor (extract nxm1 nyu1 _let_1) z1) (bvor (extract nyum1 nu1 _let_1) y1) (bvor (extract num1 0 _let_1) u1))))
)
(declare-rule bv-xor-concat-pullup3 ((@n0 Int) (@n1 Int) (@n2 Int) (@n3 Int) (@n4 Int) (xs1 (BitVec @n0) :list) (ws1 (BitVec @n1) :list) (y1 (BitVec @n2)) (z1 (BitVec @n3)) (u1 (BitVec @n4)) (nxm1 Int) (nyu1 Int) (nyum1 Int) (nu1 Int) (num1 Int))
  :premises ((= nxm1 (- (@bvsize (bvxor xs1 ws1)) 1)) (= nyu1 (+ (@bvsize y1) (@bvsize u1))) (= nyum1 (- (+ (@bvsize y1) (@bvsize u1)) 1)) (= nu1 (@bvsize u1)) (= num1 (- (@bvsize u1) 1)))
  :args (xs1 ws1 y1 z1 u1 nxm1 nyu1 nyum1 nu1 num1)
  :conclusion (= (bvxor xs1 (concat z1 y1 u1) ws1) (eo::define ((_let_1 (bvxor xs1 ws1))) (concat (bvxor (extract nxm1 nyu1 _let_1) z1) (bvxor (extract nyum1 nu1 _let_1) y1) (bvxor (extract num1 0 _let_1) u1))))
)
(declare-rule str-suffixof-elim ((@T0 Type) (@T1 Type) (s1 (Seq @T0)) (t1 (Seq @T1)))
  :args (s1 t1)
  :conclusion (= (seq.suffixof s1 t1) (eo::define ((_let_1 (seq.len s1))) (= s1 (seq.extract t1 (- (seq.len t1) _let_1) _let_1))))
)
(declare-rule str-indexof-self ((@T0 Type) (t1 (Seq @T0)) (n1 Int))
  :args (t1 n1 (Seq @T0))
  :conclusion (= (seq.indexof t1 t1 n1) (eo::define ((_let_1 ($seq_empty (Seq @T0)))) (seq.indexof _let_1 _let_1 n1)))
)
(declare-rule re-concat-star-repeat ((xs1 RegLan :list) (r1 RegLan) (ys1 RegLan :list))
  :args (xs1 r1 ys1)
  :conclusion (= (eo::define ((_let_1 (re.* r1))) (re.++ xs1 _let_1 _let_1 ys1)) (re.++ xs1 (re.* r1) ys1))
)
